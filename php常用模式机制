1.php的反射机制
根据一个对象，知道它所属的类，拥有哪些方法，属性，注释等

class User{

    public $age = 11;
	
    /**
     * 获取所有用户数据
     */
    public function getUsers(){
        
        $users = [];
        for($i=0;$i<=20;$i++){
            $user=[
                'user_id'=>rand(1000,9999),
                'class'=>'no. '.rand(100,999),
                'name'=>'username_'.rand(2999,99999),
                'join_time'=>date('Y-m-d H:i:s',time()),
            ];
            $users[] = $user;
        }
        return $users;
    }
}


	 $userMod = new User();
     
     $flc = new \ReflectionClass($userMod);
	 
	 //相当于实例化User自己 
     $userMod2 = $flc->newInstance();        
     echo $userMod2->age;

	//类中所有方法 getUsers
     $result = $flc->getMethods();            
     foreach($flc->getMethods() as $method){
         //dump($method->getDocComment());    //方法的注释
     }   
  
	// 1- 调用方法getUsers
    $getUsers = $flc->getMethod('getUsers');  
    //dump($getUsers->invokeArgs($userMod2,[]));
    
	// 2- 调用方法 getUsers 
    $getUsers = new \ReflectionMethod($userMod2,'getUsers'); 
    // dump($getUsers->invoke($userMod2));
    // die;

     $result = $flc->getProperties();  //类中属性 age
     dump($result);
     die;
	 


2.依赖注入
只要用来减少代码间的耦合，有效分离对象和它所需的外部资源
class A{
   public function a(){ return 'aa'};
 }
class B{
   public function b($obj){
     return $obj->a();
   };
 }

$aobj = new A();
$bobj = new B();
var_dump($bobj->b($aobj));


3.注册树模式
注册树模式通过将对象实例注册到一颗全局的树上, 需要的时候从对象树上摘下来使用
class Register{
  protected $_objs = null;
  
  public static function set($key,$obj){
     if(!isset($_objs[$key])){
	    self::$_objs[$key] = $obj;
	 }
	 return true;
  }


  public static function get($key){
     if(!isset($_objs[$key]){
	   self:$_objs[$key] = new $key;
	 }
     
	 return self::$_objs[$key];
  }

}

注: self 只能调用类内的属性，而static是动态调用类（父类，子类）。



4.Facade（门面/外观模式）：
为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层次的接口，使得子系统更加容易使用
(为子系统中的一组接口提供一个一致的更容易调用的界面)
class A{
  public $name;
  public $age ;
  public function setName($name){
    $this->name = $name;
  }
  public function setAge($age){
	$this->age = $age;
  }
  
  public function getUser(){
	return "用户:".$this->name."，age:".$this->age;
  }
  
}

//封装UserFacade类，方便调用
class userFacade{
	public static function getUserCall($userInfo){
		$user = new User;
		$user->setName($userInfo['name']);
		$user->setAge($userInfo['age']);
	    return $user->getUser();
	}
}

//调用
$user = ['name'="xxxx",'age'=>12];
userFacade::getUserCall($userInfo);  //最后只需一个函数就可以简化调用

5.工厂模式
分为：简单工厂(静态工厂方法)，工厂方法，抽象工厂。
抽象工厂 = 工厂方法+简易工厂模式,是由多条产品线，而简单工厂只有一条产品线，是抽象工厂的简化。而工厂方法主要用于限制类的公用方法。静态方法主要用于构建相同类型的对象。
使用工厂模式，把对象的创建和使用的过程分开。可以避免当改变某个类的名字或者方法之后，在调用这个类的所有的代码中都修改它的名字或者参数。

6.适配器模式
将各种截然不同的函数接口封装成统一的API。如PHP中的数据库操作有MySQL,MySQLi,PDO三种，可以用适配器模式统一成一致，使不同的数据库操作，统一成一样的API。类似的场景还有cache适配器，可以将memcache,redis,file,apc等不同的缓存函数，统一成一致。  

7.策略模式
将一组特定的行为和算法封装成类，以适应某些特定的上下文环境。 
eg：假如有一个电商网站系统，针对男性女性用户要各自跳转到不同的商品类目，并且所有的广告位展示不同的广告。在传统的代码中，都是在系统中加入各种if else的判断，硬编码的方式。如果有一天增加了一种用户，就需要改写代码。使用策略模式，如果新增加一种用户类型，只需要增加一种策略就可以。其他所有的地方只需要使用不同的策略就可以。 
首先声明策略的接口文件，约定了策略的包含的行为。然后，定义各个具体的策略实现类。
https://www.cnblogs.com/yuanwanli/p/8796402.html


8.观察者模式
	1：观察者模式(Observer)，当一个对象状态发生变化时，依赖它的对象全部会收到通知，并自动更新。 2：场景:一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理的逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件的主体代码。 
	3：观察者模式实现了低耦合，非侵入式的通知与更新机制。 


9.原型模式
原型模式（对象克隆以避免创建对象时消耗性能） 
	1：与工厂模式类似，都是用来创建对象。 
	2：与工厂模式的实现不同，原型模式是先创建好一个原型对象，然后通过clone原型对象来创建新的对象。这样就免去了类创建时重复的初始化操作。 
	3：原型模式适用于大对象的创建，创建一个大对象需要很大的开销，如果每次new就会消耗很大（比如new对象后需要init数据量很大时），原型模式仅需要内存拷贝即可。

10.装饰器模式
	1：装饰器模式，可以动态的添加修改类的功能 
	2：一个类提供了一项功能，如果要在修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重写实现类的方法 
	3：使用装饰器模式，仅需要在运行时添加一个装饰器对象即可实现，可以实现最大额灵活性。






来源：
https://www.cnblogs.com/yuanwanli/p/8796402.html
https://www.jianshu.com/p/84270b721a26
https://www.jianshu.com/p/6b3ce8c48f59

设计模式
https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html
https://xueyuanjun.com/books/php-design-pattern
http://www.phppan.com/php-design-pattern/


基于 Laravel + Vue 构建前后端分离应用
https://xueyuanjun.com/books/api-driven-development-laravel-vue




事务
特性：原子性，一致性，隔离性，持久性
Mysql事务的4种隔离级别，由低到高分别为：Read uncommitted 、Read committed 、Repeatable read 、Serializable 。
在事务的并发操作中可能会出现脏读，不可重复读，幻读(一个事务范围内两个相同的查询,最后一次的结果集比第一次的多)。
读未提交：一个事务可以读取另一个未提交事务的数据。 --> 脏读 --> 解决 (read commited 读提交).
读提交：一个事务要等另一个事务提交后才能读取数据。 --> 不可重复读(一个事务范围内两个相同的查询却返回了不同数据) --> 解决 (Repeatable read 可重复读).
可重复读: 在开始读取数据（事务开启）时，不再允许修改操作。 --> 幻读 -- (Mysql默认隔离级别).
不可重复读: 针对的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。
序列化：Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。
注意，大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。
https://www.cnblogs.com/yuanwanli/p/8807191.html









