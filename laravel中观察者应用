laravel中观察者应用

应用场景：
使用观察者Observer，在模型中监听CURD事件，观察者类里的方法名应该反映 Eloquent 想监听的事件。 每个方法接受 model 作为唯一参数。

使用artisan命令生成UserObserver类
php artisan make:observer UserObserver  --model=User

<?php

namespace App\Observers;

use App\User;

class UserObserver
{
    /**
     * Handle the user "created" event.
     *
     * @param  \App\User  $user
     * @return void
     */
    public function created(User $user)
    {
        //
    }

    /**
     * Handle the user "updated" event.
     *
     * @param  \App\User  $user
     * @return void
     */
    public function updated(User $user)
    {
        //
    }

    /**
     * Handle the user "deleted" event.
     *
     * @param  \App\User  $user
     * @return void
     */
    public function deleted(User $user)
    {
        //
    }

    /**
     * Handle the user "restored" event.
     *
     * @param  \App\User  $user
     * @return void
     */
    public function restored(User $user)
    {
        //
    }

    /**
     * Handle the user "force deleted" event.
     *
     * @param  \App\User  $user
     * @return void
     */
    public function forceDeleted(User $user)
    {
        //
    }
}

根据需要完善好业务逻辑后，注册这个观察者，此时需要用模型中的 observe 方法去观察，比如，可以在应用的服务提供者（AppServiceProvider）之一的 boot 方法中注册观察者
<?php

namespace App\Providers;

use App\User;
use App\Observers\UserObserver;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * 运行所有应用服务.
     *
     * @return void
     */
    public function boot()
    {
        User::observe(UserObserver::class);
    }

    /**
     * 注册服务提供.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}


或者，在模型当中直接定义 boot 方法，进行同样的操作。
public static function boot()
{
    parent::boot();
    static::observe(new UserObserver());
}


此后，当User模型中的CURD方法被调用时，会有对应的观察者去观察记录该被调用方法的过程。

应用场景：
我们在做交易的时候，一笔订单从开始到结束有很多种状态，每种状态都会发相应的通知邮件。
可以在订单更改保存后，触发saved事件，根据isDirty()和getDirty()来判断当前是否更改了状态及当前状态，发送相应的通知。
public function saved($model)
{
	// 确定模型或给定属性是否已被修改。
	$model->isDirty('status');
	// 获取自上次同步以来已更改的属性
	$model->getDirty();
}

https://learnku.com/articles/6657/model-events-and-observer-in-laravel
