java核心类

字符串和编码
1.Java字符串String是不可变对象；字符串操作不改变原字符串内容，而是返回新字符串；Java使用Unicode编码表示String和char；
2.比较字符串的内容是否相同，必须使用 equals()方法而不是用== ，要忽略大小写比较，使用 equalsIgnoreCase()方法。
3.字符串操作：
    //包含 , 搜索子串
	"Hello".contains("ll"); // true 
	"Hello".indexOf("l");   // 2
	"Hello".lastIndexOf("l"); // 3
	"Hello".startsWith("He"); // true
	"Hello".endsWith("lo"); // true
    //提取子串的例子
	"Hello".substring(2); // "llo"
	"Hello".substring(2, 4); "ll"
	
	//使用trim()方法可以移除字符串首尾空白字符。空白字符包括空格，\t，\r，\n：
	"  \tHello\r\n ".trim(); // "Hello"
	
	//strip()方法也可以移除字符串首尾空白字符,含中文的空格字符\u3000：
	"\u3000Hello\u3000".strip(); // "Hello"
	" Hello ".stripLeading(); // "Hello "  去除开头的空白
	" Hello ".stripTrailing(); // " Hello" 去除尾部的空白

	//isEmpty()和isBlank()判断字符串是否为空和空白字符串：
	"".isEmpty(); // true，因为字符串长度为0
	"  ".isEmpty(); // false，因为字符串长度不为0
	"  \n".isBlank(); // true，因为只包含空白字符
	" Hello ".isBlank(); // false，因为包含非空白字符

	//替换子串
    "hewwo".replace('l', 'w'); // "hewwo"，所有字符'l'被替换为'w'
	"A,,B;C ,D".replaceAll("[\\,\\;\\s]+", ","); // "A,B,C,D" ，正则替换
	
	//分割字符串
	String[] ss = "A,B,C,D".split("\\,"); // {"A", "B", "C", "D"}

	//拼接字符串,使用String类的静态方法join()
	String[] arr = {"A", "B", "C"};
	String s = String.join("***", arr); // "A***B***C"

	//格式化字符串,用formatted()方法 或 String类的format()静态方法
	String s = "Hi %s, your score is %d!";
	s.formatted("Alice", 80);
	String.format("Hi %s, your score is %.2f!", "Bob", 59.5);

	//类型转换,把任意基本类型或引用类型转换为字符串，可以使用静态方法valueOf()
	String.valueOf(123); // "123"
	String.valueOf(45.67); // "45.67"
	String.valueOf(true); // "true"
	String.valueOf(new Object()); // 类似java.lang.Object@636be97c

	//String和char[]类型可以互相转换
	char[] cs = "Hello".toCharArray(); // String -> char[] 后就可以下标的方式访问字母
	System.out.print(cs[0]); //H  用索引下标访问字母
	String s = new String(cs); // char[] -> String 组合成String类型，就可用String的相关函数属性，如length()求长度

	//把字符串转换为int类型：
	int n1 = Integer.parseInt("123"); // 123
	int n2 = Integer.parseInt("ff", 16); // 按十六进制转换，255
	注意，Integer有个getInteger(String)方法，它不是将字符串转换为int，而是把该字符串对应的系统变量转换为Integer	，如：
	Integer.getInteger("java.version"); // 版本号，11
	
	//把字符串转换为boolean类型：
	boolean b1 = Boolean.parseBoolean("true"); // true
	boolean b2 = Boolean.parseBoolean("FALSE"); // false	
		
    //从引用类型的数组中复制一个新对象数组
	int[] old_arr = new int[]{1,2,8,7,6};
	
	int[] new_arr = new int[array1.length]; //创建了一个新的数组后用 引用浅拷贝arraycopy
	System.arraycopy(old_arr, 0, new_arr, 0, old_arr.length); //arraycopy(Object src, int srcPos,Object dest,int destPos,int length) 
	Arrays.copyOf（浅拷贝）
	old_arr = old_arr.clone(); //直接克隆

数组操作
String[] arr = {"hah","ert","qwe"};
int long = arr.length;
String s = Arrays.toString(arr); //返回字符串类型{"hah","ert","qwe"}

	
字符编码
1.ASCII编码：1个字母占用1个字节(byte)
2.GB2312标准:1个汉字占用2个个字节(byte)	
3.Unicode编码：统一编码，需两个或者更多字节，并且固定长度的Unicode编码
4.UTF-8编码：1～4字节的变长编码，1个字母占用1个字节，1个中文占用3个字节	
注意，Java的String和char在内存中总是以Unicode编码表示。	
	

StringBuilder类
1.字符串的拼接用“+”号，但在循环拼接时会创建新的字符串对象，扔掉旧的字符串对象，这样不但浪费内存，还会影响GC效率，此时拼接用StringBuilder可以节省开支。
2.StringBuilder 是一个可变对象，可以预分配缓冲区，这样，往StringBuilder中新增字符时，不会创建新的临时对象：
	StringBuilder sb = new StringBuilder(1024);
	for (int i = 0; i < 1000; i++) {
		sb.append(',');
		sb.append(i);
	}
	String s = sb.toString();
	//链式操作
	var sb = new StringBuilder(1024);
			sb.append("Mr ")
			  .append("Bob")
			  .append("!")
			  .insert(0, "Hello, ")
			  .delete(offset,length);//去除某个字符
		System.out.println(sb.toString());		
			
StringJoiner类		
1.用分隔符拼接数组	
	String[] names = {"hh","er","uu"};
	var sj = new StringJoiner(", ");
	for(String n : names){
	  sj.add(n);
	}
	System.out.println(sj.toString()); //直接返回 hh,er,uu
//var sj = new StringJoiner(", ","开头子句","结尾子句");	// 开头子句 hh,er,uu 结尾子句
2.String还提供了一个静态方法join()，这个方法在内部使用了StringJoiner来拼接字符串，在不需要指定“开头”和“结尾”的时候，用String.join()更方便：	
var s = String.join(", ", names); //直接返回 hh,er,uu
	
包装类型
1.回顾Java的数据类型分两种：	
	基本类型：byte，short，int，long，char，float，double，boolean
	引用类型：所有class和interface类型
  注意，引用类型可以赋值为null，表示空，但基本类型不能赋值为null：
2.包装类：把int基本类型变成一个引用类型，可以为基本类型int定义一个Integer类，它只包含一个实例字段int，这样，Integer类就可以视为int的包装类（Wrapper Class）：		
3.因为包装类型非常有用，Java核心库为每种基本类型都提供了对应的包装类型：	
	基本类型	对应的引用类型
	boolean		java.lang.Boolean
	byte		java.lang.Byte
	short		java.lang.Short
	int			java.lang.Integer
	long		java.lang.Long
	float		java.lang.Float
	double		java.lang.Double
	char		java.lang.Character	

	// 通过静态方法valueOf(int)创建Integer实例:
    Integer n2 = Integer.valueOf(i);
    // 通过静态方法valueOf(String)创建Integer实例:
    Integer n3 = Integer.valueOf("100");	
	System.out.println(n3.intValue());	// 100
	
4.直接把int变为Integer的赋值写法，称为自动装箱（Auto Boxing），反过来，把Integer变为int的赋值写法，称为自动拆箱（Auto Unboxing）。
	//Auto Boxing ,Java编译器自动在int和Integer之间转型：
	Integer n = 100; // 编译器自动使用Integer.valueOf(int)
	int x = n;       // 编译器自动使用Integer.intValue()	
	注意：自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。
5.不变类,所有的包装类型都是不变类。比如，一旦创建了Integer对象，该对象就是不变的。
6.对两个Integer实例进行比较要特别注意：绝对不能用==比较，因为Integer是引用类型，必须使用equals()比较 
7.进制转换，最常用的静态方法parseInt()
	int x2 = Integer.parseInt("100", 16); // 256,因为按16进制解析
	System.out.println(Integer.toString(100)); // "100",表示为10进制
	System.out.println(Integer.toString(100, 36)); // "2s",表示为36进制
	System.out.println(Integer.toHexString(100)); // "64",表示为16进制
	System.out.println(Integer.toOctalString(100)); // "144",表示为8进制
	System.out.println(Integer.toBinaryString(100)); // "1100100",表示为2进制

8.所有的整数和浮点数的包装类型都继承自Number，因此，可以非常方便地直接通过包装类型获取各种基本类型：
	// 向上转型为Number:
	Number num = new Integer(999);
	// 获取byte, int, long, float, double:
	byte b = num.byteValue();
	int n = num.intValue();
	long ln = num.longValue();
	float f = num.floatValue();
	double d = num.doubleValue();

JavaBean		
1.JavaBean是一种符合命名规范的class，它通过getter和setter来定义属性；
2.利用IDE快速生成getter和setter；
在IDE编辑器中，先输入以下代码：
public class Person {
    private String name;
    private int age;
}	
然后，点击右键，在弹出的菜单中选择“Source”，“Generate Getters and Setters”，在弹出的对话框中选中需要生成getter和setter方法的字段，点击确定即可由IDE自动完成所有方法代码。
3.使用Introspector.getBeanInfo()可以获取属性列表。
	
enum枚举类型
0.enum定义的类型就是class。	
1.Java使用enum定义枚举类型，它被编译器编译为final class Xxx extends Enum { … }；	
2.通过name()获取常量定义的字符串，注意不要使用toString()；
3.通过ordinal()返回常量定义的顺序（无实质意义）；
4.可以为enum编写构造方法、字段和方法
5.enum的构造方法要声明为private，字段强烈建议声明为final；
6.enum适合用在switch语句中。
	public class Main {
		public static void main(String[] args) {
			Weekday day = Weekday.SUN; //day就是一个实例
			switch(day) {
			case MON:
			case TUE:
			case WED:
			case THU:
			case FRI:
				System.out.println("Today is " + day + ". Work at office!");
				break;
			case SAT:
			case SUN:
				System.out.println("Today is " + day + ". Work at home!");
				break;
			default:
				throw new RuntimeException("cannot process " + day);
			}
		}
	}

    //enum 本身就是个类
	enum Weekday {
	    //每个实例
		MON(1,"周一"), TUE(2,"周二"), WED(3,"周三"), THU(4,"周四"), FRI(5,"周五"), SAT(6,"周六"), SUN(7,"周日");

		public  final int val;
		private final String name;
		private Weekday(int val ,String name){
		  this.val = val;
		  this.name = name;
	   }
	  
	   @Override
	   public String toString(){
		return this.name;
	  }

	}
7.enum的比较
使用enum定义的枚举类是一种引用类型。前面我们讲到，引用类型比较，要使用equals()方法，如果使用==比较，它比较的是两个引用类型的变量是否是同一个对象。因此，引用类型比较，要始终使用equals()方法，但enum类型可以例外（因为enum类型的每个常量在JVM中只有一个唯一实例，所以可以直接用==比较）。
8.enum类型属性	
	name()，ordinal()
	
不变类特点：	
1.定义class时使用final，无法派生子类；
2.每个字段使用final，保证创建实例后无法修改任何字段。
3.如String、Integer等类都是不变类。
	
BigInteger类
1.java.math.BigInteger用来表示任意大小的整数。BigInteger内部用一个int[]数组来模拟一个非常大的整数；
2.和long型整数运算比，BigInteger不会有范围限制，但缺点是速度比较慢；
3.BigInteger和Integer、Long一样，也是不可变类，并且也继承自Number类；
	转换为byte：byteValue()
	转换为short：shortValue()
	转换为int：intValue()
	转换为long：longValue()
	转换为float：floatValue()
	转换为double：doubleValue()
4.使用longValueExact()方法时，如果超出了long型的范围，会抛出ArithmeticException；
5.如果BigInteger的值超过了float的最大范围，返回 Infinity 。	
6.BigInteger做运算的时候，只能使用实例方法	
	BigInteger i1 = new BigInteger("1234567890");
	BigInteger i2 = new BigInteger("12345678901234567890");
	BigInteger sum = i1.add(i2); // 12345678902469135780  ，multiply乘
		
BigDecimal类	
1.和BigInteger类似，BigDecimal可以表示一个任意大小且精度完全准确的浮点数。	
2.BigDecimal用scale()表示小数位数	
	BigDecimal d2 = new BigDecimal("123.4500");
	System.out.println(d2.scale()); // 4
	BigDecimal d3 = new BigDecimal("1234500");
	System.out.println(d3.scale()); // 0
3.通过BigDecimal的stripTrailingZeros()方法，可以将一个BigDecimal格式化为一个相等的，但去掉了末尾0的BigDecimal
	BigDecimal d1 = new BigDecimal("123.4500");
	BigDecimal d2 = d1.stripTrailingZeros();
	System.out.println(d1.scale()); // 4
	System.out.println(d2.scale()); // 2,因为去掉了00	
		
	BigDecimal d3 = new BigDecimal("1234500");
	BigDecimal d4 = d3.stripTrailingZeros();
	System.out.println(d3.scale()); // 0
	System.out.println(d4.scale()); // -2 ，scale()返回负数，表示这个数是个整数，并且末尾有2个0。
4.对一个BigDecimal设置它的scale（四舍五入或者直接截断）	
	import java.math.BigDecimal;
	import java.math.RoundingMode;	
	BigDecimal d1 = new BigDecimal("123.456789");
    BigDecimal d2 = d1.setScale(4, RoundingMode.HALF_UP); // 四舍五入，123.4568
    BigDecimal d3 = d1.setScale(4, RoundingMode.DOWN); // 直接截断，123.4567
5.对BigDecimal做加、减、乘时，精度不会丢失，但做除法时，存在无法除尽的情况，这时，就必须指定精度以及如何进行截断：
	BigDecimal d1 = new BigDecimal("123.456");
	BigDecimal d2 = new BigDecimal("23.456789");
	BigDecimal d3 = d1.divide(d2, 10, RoundingMode.HALF_UP); // 保留10位小数并四舍五入
	BigDecimal d4 = d1.divide(d2); // 报错：ArithmeticException，因为除不尽
6.对BigDecimal做除法的同时求余数：
    BigDecimal n = new BigDecimal("12.345");
	BigDecimal m = new BigDecimal("0.12");
	BigDecimal[] dr = n.divideAndRemainder(m); //返回的数组包含两个 BigDecimal，分别是商(整数)和余数(不会大于除数)
7.比较两个BigDecimal的值是否相等，必须使用compareTo()方法来比较，它根据两个值的大小分别返回负数、正数和0，分别表示小于、大于和等于。
	System.out.println(d1.compareTo(d2)); // 0
	注意
	1).总是使用compareTo()比较两个BigDecimal的值，不要使用equals()！
	2).若使用 equals() 方法比较，不但要求两个BigDecimal的值相等，还要求它们的scale()相等：
		BigDecimal d1 = new BigDecimal("123.456");
		BigDecimal d2 = new BigDecimal("123.45600");
		System.out.println(d1.equals(d2)); // false,因为scale不同
		System.out.println(d1.equals(d2.stripTrailingZeros())); // true,因为d2去除尾部0后scale变为2
	
常用工具类
1.Math类
	Math.random(); // 0.53907... 每次都不一样，范围0 <= x < 1
	
	double x = Math.random(); // x的范围是[0,1)
	double min = 10;
	double max = 50;
	double y = x * (max - min) + min; // y的范围是[10,50)
	long n = (long) y; // n的范围是[10,50)的整数

	Math.abs(-100); // 100求绝对值
	Math.max(100, 99); // 100
	Math.pow(2, 10);   // 2的10次方=1024
	Math.sqrt(2); // 1.414..
	Math.exp(2); // 7.389... 计算e的x次方：
	Math.log(4); // 1.386... 计算以e为底的对数：
	Math.log10(100); // 2    计算以10为底的对数：
	Math.sin(3.14); // 0.00159...  三角函数：
	Math.cos(3.14); // -0.9999...
	Math.tan(3.14); // -0.0015...
	Math.asin(1.0); // 1.57079...
	Math.acos(1.0); // 0.0
	double pi = Math.PI; // 3.14159...  数学常量：
	double e = Math.E; // 2.7182818...
	Math.sin(Math.PI / 6); // sin(π/6) = 0.5

2.Random创建伪随机数
  1).伪随机数是指只要给定一个初始的种子，产生的随机数序列是完全一样的。
  2).要生成一个随机数，可以使用nextInt()、nextLong()、nextFloat()、nextDouble()：
	Random r = new Random();
	r.nextInt(); // 2071575453,每次都不一样
	r.nextInt(10); // 5,生成一个[0,10)之间的int
	r.nextLong(); // 8811649292570369305,每次都不一样
	r.nextFloat(); // 0.54335...生成一个[0,1)之间的float
	r.nextDouble(); // 0.3716...生成一个[0,1)之间的double

3.SecureRandom创建真随机数
    实际上真正的真随机数只能通过量子力学原理来获取，而我们想要的是一个不可预测的安全的随机数，SecureRandom就是用来创建安全的随机数的：
	 SecureRandom sr = new SecureRandom();
	 System.out.println(sr.nextInt(100));


