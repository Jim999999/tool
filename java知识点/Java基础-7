设计模式
1.创建型模式，创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。
  创建型模式包括：
    1).工厂方法：Factory Method
	    定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。
	2).抽象工厂：Abstract Factory
		提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
	3).生成器(建造者)：Builder
		将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。是使用多个“小型”工厂来最终创建出一个完整对象。
		即将一个复杂的对象分成多个简单步骤来完成。
	4).原型：Prototype
		用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。是指创建新对象的时候，根据现有的一个原型来创建。
	5).单例：Singleton
		保证一个类仅有一个实例，并提供一个访问它的全局访问点。
2.结构型模式，主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单地使用继承，而更多地通过组合与运行期的动态组合来实现更灵活的功能。
  结构型模式有：
    1).适配器
		将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。适配器模式是Adapter，也称Wrapper。
	2).桥接
		将抽象部分与它的实现部分分离，使它们都可以独立地变化。
	3).组合
		将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。
	4).装饰器(Decorator)
		动态地给一个对象添加一些额外的职责。就增加功能来说，相比生成子类更为灵活。是一种在运行期动态给某个对象的实例增加功能的方法。
	5).外观(Facade)
		为子系统中的一组接口提供一个一致的界面。Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
	6).享元
		运用共享技术有效地支持大量细粒度的对象。
	7).代理
		为其他对象提供一种代理以控制对这个对象的访问。代理模式，即Proxy，它和Adapter模式很类似。
3.行为型模式
  行为型模式有：
	责任链
	命令
	解释器
	迭代器
	中介
	备忘录
	观察者
	状态
	策略
	模板方法
	访问者



101.JDBC
	1).JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。
	2).Java程序访问数据库：Java代码 --> JDBC接口 -> JDBC驱动 -> 数据库。
	3).实际上，一个MySQL的JDBC的驱动就是一个jar包，它本身也是纯Java编写的。
	4).JDBC驱动，其实就是一个第三方jar包.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	