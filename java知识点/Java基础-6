1.使用Concurrent集合
  1).通过ReentrantLock和Condition实现了一个BlockingQueue：
		public class TaskQueue {
			private final Lock lock = new ReentrantLock();
			private final Condition condition = lock.newCondition();
			private Queue<String> queue = new LinkedList<>();

			public void addTask(String s) {
				lock.lock();
				try {
					queue.add(s);
					condition.signalAll();
				} finally {
					lock.unlock();
				}
			}

			public String getTask() {
				lock.lock();
				try {
					while (queue.isEmpty()) {
						condition.await();
					}
					return queue.remove();
				} finally {
					lock.unlock();
				}
			}
		}
   2).BlockingQueue即是当一个线程调用这个TaskQueue的getTask()方法时，该方法内部可能会让线程变成等待状态，直到队列条件满足不为空，线程被唤醒后，getTask()方法才会返回。
   3).Java标准库的java.util.concurrent包提供的线程安全的集合
		interface				non-thread-safe						thread-safe
		List					ArrayList							CopyOnWriteArrayList
		Map						HashMap								ConcurrentHashMap
		Set						HashSet / TreeSet					CopyOnWriteArraySet
		Queue					ArrayDeque / LinkedList				ArrayBlockingQueue / LinkedBlockingQueue
		Deque					ArrayDeque / LinkedList				LinkedBlockingDeque
   4).使用java.util.concurrent包提供的线程安全的并发集合可以大大简化多线程编程： 
		Map<String, String> map = new ConcurrentHashMap<>();
		// 在不同的线程读写:
		map.put("A", "1");
		map.put("B", "2");
		map.get("A", "1");

2.使用Atomic
  1).Java的java.util.concurrent包除了提供底层锁、并发集合外，还提供了一组原子操作的封装类，它们位于java.util.concurrent.atomic包。
  2).以AtomicInteger为例，它提供的主要操作有：
		增加值并返回新值：int addAndGet(int delta)
		加1后返回新值：   int incrementAndGet()
		获取当前值：      int get()
		用CAS方式设置：   int compareAndSet(int expect, int update)
   3).CAS是指，在这个操作中，如果AtomicInteger的当前值是prev，那么就更新为next，返回true。如果AtomicInteger的当前值不是prev，就什么也不干，返回false。通过CAS操作并配合do ... while循环，即使其他线程修改了AtomicInteger的值，最终的结果也是正确的。
		public int incrementAndGet(AtomicInteger var) {
			int prev, next;
			do {
				prev = var.get();
				next = prev + 1;
			} while ( ! var.compareAndSet(prev, next));  // 如果AtomicInteger的当前值是prev，那么就更新为next，返回true , 否则什么也不干，返回false
			return next;
		}

3.使用线程池
   1).这种能接收大量小任务并进行分发处理的就是线程池。
   2).简单地说，线程池内部维护了若干个线程，没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。
   3).Java标准库提供了 ExecutorService 接口表示线程池，它的典型用法如下：
		// 创建固定大小的线程池:
		ExecutorService executor = Executors.newFixedThreadPool(3);
		// 提交任务:
		executor.submit(task1);
		executor.submit(task2);
		executor.submit(task3);
		executor.submit(task4);
		executor.submit(task5);
   4).因为ExecutorService只是接口，Java标准库提供的几个常用实现类有：
		FixedThreadPool：线程数固定的线程池；
		CachedThreadPool：线程数根据任务动态调整的线程池；
		SingleThreadExecutor：仅单线程执行的线程池。
   5).线程池在程序结束的时候要关闭。
		// 创建一个固定大小的线程池:
        ExecutorService es = Executors.newFixedThreadPool(4);
        // 关闭线程池:
        es.shutdown();
      注意，使用shutdown()方法关闭线程池的时候，它会等待正在执行的任务先完成，然后再关闭。shutdownNow()会立刻停止正在执行的任务，awaitTermination()则会等待指定的时间让线程池关闭。

		import java.util.concurrent.*;
		public class Main {
			public static void main(String[] args) {
				// 创建一个固定大小的线程池:
				ExecutorService es = Executors.newFixedThreadPool(4);
				for (int i = 0; i < 6; i++) {
					es.submit(new Task("" + i));
				}
				// 关闭线程池:
				es.shutdown();
			}
		}

		class Task implements Runnable {
			private final String name;

			public Task(String name) {
				this.name = name;
			}

			@Override
			public void run() {
				System.out.println("start task " + name);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
				}
				System.out.println("end task " + name);
			}
		}

	6).定期反复执行 ScheduledThreadPool , 放入ScheduledThreadPool的任务可以定期反复执行。
		6.1).创建一个ScheduledThreadPool仍然是通过Executors类：
			ScheduledExecutorService ses = Executors.newScheduledThreadPool(4);
			// 1秒后执行一次性任务:
			ses.schedule(new Task("one-time"), 1, TimeUnit.SECONDS);
			// 2秒后开始执行定时任务，每3秒执行:
			ses.scheduleAtFixedRate(new Task("fixed-rate"), 2, 3, TimeUnit.SECONDS);
			// 2秒后开始执行定时任务，以3秒为间隔执行:
			ses.scheduleWithFixedDelay(new Task("fixed-delay"), 2, 3, TimeUnit.SECONDS);
        6.2).注意FixedRate和FixedDelay的区别。
			FixedRate是指任务总是以固定时间间隔触发，不管任务执行多长时间(不管任务执行有无完成)：
			而FixedDelay是指，上一次任务执行完毕后，等待固定的时间间隔，再执行下一次任务：
        6.3).Java标准库还提供了一个java.util.Timer类，
			这个类也可以定期执行任务，但是，一个Timer会对应一个Thread，所以，一个Timer只能定期执行一个任务，多个定时任务必须启动多个Timer，
			而一个ScheduledThreadPool就可以调度多个定时任务，所以，我们完全可以用ScheduledThreadPool取代旧的Timer。

4.使用Callable
  1).在执行多个任务的时候，经常需要实现runnable接口，但该接口没有返回值，此时用Callable代替即可用返回值返回需要的数据.
		class Task implements Callable<String> {
			public String call() throws Exception {
				return longTimeCalculation(); 
			}
		}
   2).Callable接口是一个泛型接口，可以返回指定类型的结果。
   3).获得Callable异步执行的结果，可以用future类型。
   
5.使用Future
  1).ExecutorService.submit()方法，返回的是一个Future类型，一个Future类型的实例代表一个未来能获取结果的对象：
		ExecutorService executor = Executors.newFixedThreadPool(4); 
		// 定义任务:
		Callable<String> task = new Task();
		// 提交任务并获得Future:
		Future<String> future = executor.submit(task);
		// 从Future获取异步执行返回的结果:
		String result = future.get(); // 可能阻塞
   2).当提交一个Callable任务后，会同时获得一个Future对象，在主线程某个时刻调用Future对象的get()方法，就可以获得异步执行的结果。
   3).一个Future<V>接口表示一个未来可能会返回的结果，它定义的方法有：
		get()：获取结果（可能会等待）
		get(long timeout, TimeUnit unit)：获取结果，但只等待指定的时间；
		cancel(boolean mayInterruptIfRunning)：取消当前任务；
		isDone()：判断任务是否已完成。
   4).使用Future获得异步执行结果时，要么调用阻塞方法get()，要么轮询看isDone()是否为true，这两种方法都不是很好，因为主线程也会被迫等待。

6.使用CompletableFuture
	1).可见CompletableFuture的优点是：
		异步任务结束时，会自动回调某个对象的方法；
		异步任务出错时，会自动回调某个对象的方法；
		主线程设置好回调后，不再关心异步任务的执行。
	2).CompletableFuture更强大的功能是，多个CompletableFuture可以串行执行
			import java.util.concurrent.CompletableFuture;	
			public class Main {
				public static void main(String[] args) throws Exception {
					// 第一个任务:
					CompletableFuture<String> cfQuery = CompletableFuture.supplyAsync(() -> {
						return queryCode("中国石油");
					});
					// cfQuery成功后继续执行下一个任务:
					CompletableFuture<Double> cfFetch = cfQuery.thenApplyAsync((code) -> {
						return fetchPrice(code);
					});
					// cfFetch成功后打印结果:
					cfFetch.thenAccept((result) -> {
						System.out.println("price: " + result);
					});
					// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:
					Thread.sleep(2000);
				}

				static String queryCode(String name) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
					}
					return "601857";
				}

				static Double fetchPrice(String code) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
					}
					return 5 + Math.random() * 20;
				}
			}

	3).除了串行执行外，多个CompletableFuture还可以并行执行
		// CompletableFuture
		import java.util.concurrent.CompletableFuture;
		public class Main {
			public static void main(String[] args) throws Exception {
				// 两个CompletableFuture执行异步查询:
				CompletableFuture<String> cfQueryFromSina = CompletableFuture.supplyAsync(() -> {
					return queryCode("中国石油", "https://finance.sina.com.cn/code/");
				});
				CompletableFuture<String> cfQueryFrom163 = CompletableFuture.supplyAsync(() -> {
					return queryCode("中国石油", "https://money.163.com/code/");
				});

				// 用anyOf合并为一个新的CompletableFuture:
				CompletableFuture<Object> cfQuery = CompletableFuture.anyOf(cfQueryFromSina, cfQueryFrom163);

				// 两个CompletableFuture执行异步查询:
				CompletableFuture<Double> cfFetchFromSina = cfQuery.thenApplyAsync((code) -> {
					return fetchPrice((String) code, "https://finance.sina.com.cn/price/");
				});
				CompletableFuture<Double> cfFetchFrom163 = cfQuery.thenApplyAsync((code) -> {
					return fetchPrice((String) code, "https://money.163.com/price/");
				});

				// 用anyOf合并为一个新的CompletableFuture:
				CompletableFuture<Object> cfFetch = CompletableFuture.anyOf(cfFetchFromSina, cfFetchFrom163);

				// 最终结果:
				cfFetch.thenAccept((result) -> {
					System.out.println("price: " + result);
				});
				// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:
				Thread.sleep(200);
			}

			static String queryCode(String name, String url) {
				System.out.println("query code from " + url + "...");
				try {
					Thread.sleep((long) (Math.random() * 100));
				} catch (InterruptedException e) {
				}
				return "601857";
			}

			static Double fetchPrice(String code, String url) {
				System.out.println("query price from " + url + "...");
				try {
					Thread.sleep((long) (Math.random() * 100));
				} catch (InterruptedException e) {
				}
				return 5 + Math.random() * 20;
			}
		}
		上述逻辑实现的异步查询规则实际上是：

		┌─────────────┐ ┌─────────────┐
		│ Query Code  │ │ Query Code  │
		│  from sina  │ │  from 163   │
		└─────────────┘ └─────────────┘
			   │               │
			   └───────┬───────┘
					   ▼
				┌─────────────┐
				│    anyOf    │
				└─────────────┘
					   │
			   ┌───────┴────────┐
			   ▼                ▼
		┌─────────────┐  ┌─────────────┐
		│ Query Price │  │ Query Price │
		│  from sina  │  │  from 163   │
		└─────────────┘  └─────────────┘
			   │                │
			   └────────┬───────┘
						▼
				 ┌─────────────┐
				 │    anyOf    │
				 └─────────────┘
						│
						▼
				 ┌─────────────┐
				 │Display Price│
				 └─────────────┘
	4).除了anyOf()可以实现“任意个CompletableFuture只要一个成功”，allOf()可以实现“所有CompletableFuture都必须成功”，这些组合操作可以实现非常复杂的异步流程控制。
		最后我们注意CompletableFuture的命名规则：
		xxx()：表示该方法将继续在已有的线程中执行；
		xxxAsync()：表示将异步在线程池中执行。
		
		CompletableFuture可以指定异步处理流程：
		thenAccept()处理正常结果；
		exceptional()处理异常结果；
		thenApplyAsync()用于串行化另一个CompletableFuture；
		anyOf()和allOf()用于并行化多个CompletableFuture。

7.使用ForkJoin
	1).Java 7开始引入了一种新的Fork/Join线程池，它可以执行一种特殊的任务：把一个大任务拆成多个小任务并行执行。
	2).Fork/Join任务的原理：判断一个任务是否足够小，如果是，直接计算，否则，就分拆成几个小任务分别计算。
	3).Fork/Join是一种基于“分治”的算法：通过分解任务，并行执行，最后合并结果得到最终结果。
		ForkJoinPool线程池可以把一个大任务分拆成小任务并行执行，任务类必须继承自RecursiveTask（覆写compute）或RecursiveAction。
		使用Fork/Join模式可以进行并行计算以提高效率。
	4).Fork/Join线程池在Java标准库中就有应用。
	   Java标准库提供的java.util.Arrays.parallelSort(array)可以进行并行排序，它的原理就是内部通过Fork/Join对大数组分拆进行并行排序，在多核CPU上就可以大大提高排序的速度。
    5).分割大数组并计算和
		import java.util.Arrays;
		import java.util.Random;
		import java.util.concurrent.*;

		public class Forkjoin {
				public static void main(String[] args) throws Exception {
					// 创建2000个随机数组成的数组:
					long[] array = new long[2000];
					long expectedSum = 0;
					for (int i = 0; i < array.length; i++) {
						array[i] = random();
						expectedSum += array[i];
					}
					System.out.println("Expected sum: " + expectedSum);
					// System.out.println(Arrays.toString(array));


					// fork/join:
					ForkJoinTask<Long> task = new SumTask(array, 0, array.length);
					long startTime = System.currentTimeMillis();

					// 调用唤醒
					Long result = ForkJoinPool.commonPool().invoke(task);

					long endTime = System.currentTimeMillis();
					System.out.println("Fork/join sum: " + result + " in " + (endTime - startTime) + " ms.");
				}
			
				static Random random = new Random(0);
			
				static long random() {
					return random.nextInt(10000);
				}

		}


		 // 继承 RecursiveTask 并覆写 compute  
		class SumTask extends RecursiveTask<Long> {
			static final int THRESHOLD = 500;
			long[] array;
			int start;
			int end;

			SumTask(long[] array, int start, int end) {
				this.array = array;
				this.start = start;
				this.end = end;
			}

			@Override
			protected Long compute() {
				if (end - start <= THRESHOLD) {
					// 如果任务足够小,直接计算:
					long sum = 0;
					for (int i = start; i < end; i++) {
						sum += this.array[i];
						// 故意放慢计算速度:
						try {
							Thread.sleep(1);
						} catch (InterruptedException e) {
						}
					}
					return sum;
				}
				// 任务太大,一分为二:
				int middle = (end + start) / 2;
				System.out.println(String.format("split %d~%d ==> %d~%d, %d~%d", start, end, start, middle, middle, end));
				SumTask subtask1 = new SumTask(this.array, start, middle);
				SumTask subtask2 = new SumTask(this.array, middle, end);

				//invokeAll会并行运行两个子任务:
				invokeAll(subtask1, subtask2);

				// 获得子任务的结果:
				Long subresult1 = subtask1.join();
				Long subresult2 = subtask2.join();
				Long result = subresult1 + subresult2;
				System.out.println("result = " + subresult1 + " + " + subresult2 + " ==> " + result);
				return result;
			}
		}

8.使用ThreadLocal
	1).Thread对象代表一个线程，我们可以在代码中调用Thread.currentThread()获取当前线程。
	2).在一个线程中，横跨若干方法调用，需要传递的对象，称之为上下文（Context）。
	3).Java标准库提供了一个特殊的 ThreadLocal，它可以在一个线程中传递同一个对象。
	4).ThreadLocal实例通常总是以静态字段初始化如下：
		static ThreadLocal<User> threadLocalUser = new ThreadLocal<>();
		典型使用方式如下：
		void processUser(user) {
			try {
				threadLocalUser.set(user);
				step1();
				step2();
			} finally {
				threadLocalUser.remove();
			}
		}
	5).通过设置一个User实例关联到ThreadLocal中，在移除之前，所有方法都可以随时获取到该User实例：
		void step1() {
			User u = threadLocalUser.get();
			log();
			printUser();
		}

		void log() {
			User u = threadLocalUser.get();
			println(u.name);
		}

		void step2() {
			User u = threadLocalUser.get();
			checkUser(u.id);
		}
	6).普通的方法调用一定是同一个线程执行的，所以，step1()、step2()以及log()方法内，threadLocalUser.get()获取的User对象是同一个实例。
		实际上，可以把ThreadLocal看成一个全局Map<Thread, Object>：每个线程获取ThreadLocal变量时，总是使用Thread自身作为key：
		Object threadLocalValue = threadLocalMap.get(Thread.currentThread());
		因此，ThreadLocal相当于给每个线程都开辟了一个独立的存储空间，各个线程的ThreadLocal关联的实例互不干扰。
	7).最后，特别注意ThreadLocal一定要在finally中清除：
		try {
			threadLocalUser.set(user);
			...
		} finally {
			threadLocalUser.remove();
		}

	8).也可以通过AutoCloseable接口配合try (resource) {...}结构，让编译器自动为我们关闭。
		public class UserContext implements AutoCloseable {

			static final ThreadLocal<String> ctx = new ThreadLocal<>();

			public UserContext(String user) {
				ctx.set(user);
			}

			public static String currentUser() {
				return ctx.get();
			}

			@Override
			public void close() {
				ctx.remove();
			}
		}
		使用借助try (resource) {...}结构：
			try (var ctx = new UserContext("Bob")) {
				// 可任意调用 UserContext.currentUser():
				String currentUser = UserContext.currentUser();
			} // 在此自动调用UserContext.close()方法释放ThreadLocal关联对象
	9).ThreadLocal小结
		ThreadLocal表示线程的“局部变量”，它确保每个线程的ThreadLocal变量都是各自独立的；
		ThreadLocal适合在一个线程的处理流程中保持上下文（避免了同一参数在所有方法中传递）；
		使用ThreadLocal要用try ... finally结构，并在finally中清除。
















