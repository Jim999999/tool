反射
1.反射就是Reflection，Java的反射是指程序在运行期就可以拿到一个对象的所有信息。
2.通过Class实例(该实例为JVM创建的且类名为Class的实例)获取class信息的方法称为反射（Reflection）。

Class类
1.除了int等基本类型外，Java的其他类型全部都是class（包括interface）：
	String，Object，Runnable，Exception，...
2.每加载一种class，JVM就为其创建一个Class类型的实例，并关联起来。注意：这里的Class类型是一个名叫Class的class：
	public final class Class {
		private Class() {}
	}
  以String类为例，当JVM加载String类时，它首先读取String.class文件到内存，然后，为String类创建一个Class实例并关联起来：
  Class cls = new Class(String);  //注意，Class 是上述类的类名
3.获取一个class的Class实例（JVM为其创建的Class类型实例）？有三个方法：
  1).直接通过一个class的静态变量class获取：
	Class cls = String.class;  // class java.lang.String
  2).通过实例变量提供的 getClass()方法获取：
	String s = "Hello";
	Class cls = s.getClass(); // class java.lang.String
  3).通过完整类名调用静态方法 Class.forName()获取：
	Class cls = Class.forName("java.lang.String");
4.获取到了一个Class实例，就可以通过该Class实例来创建对应类型的实例：
	// 获取String的Class实例:
	Class cls = String.class;
	// 创建一个String实例:
	String s = (String) cls.newInstance();
	上述代码相当于new String()，通过Class.newInstance()可以创建类实例，它的局限是：只能调用public的无参数构造方法。

访问字段
1.对任意的一个Object实例，只要获取了它的Class，就可以获取它的一切信息。
	Class类提供了以下几个方法来获取字段：
		Field   getField(name)：根据字段名获取某个public的field（包括父类）
		Field   getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）
		Field[] getFields()：获取所有public的field（包括父类）
		Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）
		
3.用反射获取该字段的信息：
	Field f = String.class.getDeclaredField("value");
	f.getName(); // "value"
	f.getType(); // class [B 表示byte[]类型
	int m = f.getModifiers();
	Modifier.isFinal(m); // true
	Modifier.isPublic(m); // false
	Modifier.isProtected(m); // false
	Modifier.isPrivate(m); // true
	Modifier.isStatic(m); // false
4.用 Field.get(Object)获取指定实例的指定字段的值。	
	Object p = new Person("Xiao Ming");
	Class c = p.getClass(); // Person.class;
	Field f = c.getDeclaredField("name");
	Object value = f.get(p);
	System.out.println(value); // "Xiao Ming"
5.通过Field.set(Object, Object)设置字段值
	Person p = new Person("Xiao Ming");
	System.out.println(p.getName()); // "Xiao Ming"
	Class c = p.getClass();
	Field f = c.getDeclaredField("name");
	f.setAccessible(true); //修改非public字段，需要首先调用setAccessible(true)
	f.set(p, "Xiao Hong");
	System.out.println(p.getName()); // "Xiao Hong"

6.通过Class实例获取所有Method信息
	Method getMethod(name, Class...)：获取某个public的Method（包括父类）
	Method getDeclaredMethod(name, Class...)：获取当前类的某个Method（不包括父类）
	Method[] getMethods()：获取所有public的Method（包括父类）
	Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）
 1).通过Class实例的方法可以获取Method实例：getMethod()，getMethods()，getDeclaredMethod()，getDeclaredMethods()； 
	 Class stdClass = Student.class;
	 stdClass.getMethod("getScore", String.class)  // getMethod("函数名", 参数)
 2).通过Method实例可以获取方法信息：getName()，getReturnType()，getParameterTypes()，getModifiers()；
 3).通过Method实例可以调用某个对象的方法：Object invoke(Object instance, Object... parameters)；
 4).通过设置setAccessible(true)来访问非public方法；
 5).通过反射调用方法时，仍然遵循多态原则。

7.调用构造方法
 通过Class实例获取Constructor的方法如下：
	getConstructor(Class...)：获取某个public的Constructor；返回实例。
	getDeclaredConstructor(Class...)：获取某个Constructor；
	getConstructors()：获取所有public的Constructor；
	getDeclaredConstructors()：获取所有Constructor。
 注意Constructor总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。
 调用非public的Constructor时，必须首先通过setAccessible(true)设置允许访问。setAccessible(true)可能会失败。

	// 获取构造方法Integer(int):
	Constructor cons1 = Integer.class.getConstructor(int.class); //返回实例
	// 调用构造方法:
	Integer n1 = (Integer) cons1.newInstance(123);
	System.out.println(n1);

8.获取父类的Class
 1).通过Class对象可以获取继承关系：
	Class getSuperclass()：获取父类类型；
		Class i = Integer.class;
        Class n = i.getSuperclass(); 
	Class[] getInterfaces()：获取当前类实现的所有接口。
		Class s = Integer.class;
        Class[] is = s.getInterfaces();
        for (Class i : is) {
            System.out.println(i);
        }
 2).对所有interface的Class调用getSuperclass()返回的是null，获取接口的父接口要用getInterfaces()：
 3).如果一个类没有实现任何interface，那么getInterfaces()返回空数组。	
 4).通过Class对象的isAssignableFrom()方法可以判断一个向上转型是否可以实现。
 
注解（Annotation）
  定义：
	1.注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”：
	2.注解（Annotation）是Java语言用于工具处理的标注：
	3.注解可以配置参数，没有指定配置的参数使用默认值；
	4.如果参数名称是value，且只有一个参数，那么可以省略参数名称。
	5.Java使用@interface定义注解：
	6.可定义多个参数和默认值，核心参数使用value名称；
	7.必须设置@Target来指定Annotation可以应用的范围；
	8.应当设置@Retention(RetentionPolicy.RUNTIME)便于运行期读取该Annotation。
  处理：
	1.根据@Retention的配置：
		1).SOURCE类型的注解在编译期就被丢掉了，主要由编译器使用；
		2).CLASS类型的注解仅保存在class文件中，它们不会被加载进JVM，主要由底层工具库使用；
		3).RUNTIME类型的注解会被加载进JVM，并且在运行期可以被程序读取，RUNTIME类型注解不但要使用，还经常需要编写。  
	2.注解定义后也是一种class，所有的注解都继承自java.lang.annotation.Annotation，因此，读取注解，需要使用反射API。
		2.2.Java提供的使用反射API读取Annotation的方法包括：
		判断某个注解是否存在于Class、Field、Method或Constructor：
		Class.isAnnotationPresent(Class)
			// 判断@Report是否存在于Person类:
			Person.class.isAnnotationPresent(Report.class);
		Field.isAnnotationPresent(Class)
		Method.isAnnotationPresent(Class)
		Constructor.isAnnotationPresent(Class)

		2.3.使用反射API读取Annotation：
		Class.getAnnotation(Class)
		Field.getAnnotation(Class)
		Method.getAnnotation(Class)
		Constructor.getAnnotation(Class)
			// 获取Person定义的@Report注解:
			Report report = Person.class.getAnnotation(Report.class);
			int type = report.type();
			String level = report.level();
		2.4.使用反射API读取Annotation有两种方法。方法一是先判断Annotation是否存在，如果存在，就直接读取：
			Class cls = Person.class;
			if (cls.isAnnotationPresent(Report.class)) {
				Report report = cls.getAnnotation(Report.class);
				...
			}
		2.5.第二种方法是直接读取Annotation，如果Annotation不存在，将返回null：
			Class cls = Person.class;
			Report report = cls.getAnnotation(Report.class);
			if (report != null) {
			   ...
			}

泛型（“代码模板”）
1.泛型是定义一种模板，例如ArrayList<T>，在代码中为用到的类创建对应的ArrayList<类型>：
	ArrayList<String> strList = new ArrayList<String>();
2.向上转型，在Java标准库中的ArrayList<T>实现了List<T>接口，它可以向上转型为List<T>：
	List<String> list = new ArrayList<String>();
	要特别注意：不能把ArrayList<Integer>向上转型为ArrayList<Number>或List<Number>。
3.注意泛型的继承关系：可以把ArrayList<Integer>向上转型为List<Integer>（T不能变！），但不能把ArrayList<Integer>向上转型为ArrayList<Number>（T不能变成父类）。
4.如果不定义泛型类型时，泛型类型实际上就是Object：
5.简写
	// 可以省略后面的Number，编译器可以自动推断泛型类型：
	List<Number> list = new ArrayList<>();
    ArrayList<String> listString =  new ArrayList<>();
6.除了ArrayList<T>使用了泛型，还可以在接口中使用泛型。例如，Arrays.sort(Object[])可以对任意数组进行排序，但待排序的元素必须实现Comparable<T>这个泛型接口：
	public interface Comparable<T> {
		/**
		 * 返回负数: 当前实例比参数o小
		 * 返回0: 当前实例与参数o相等
		 * 返回正数: 当前实例比参数o大
		 */
		int compareTo(T o);
	}
7.编写泛型
	编写泛型时，需要定义泛型类型<T>；
	静态方法不能引用泛型类型<T>，必须定义其他类型（例如<K>）来实现静态泛型方法；
	泛型可以同时定义多种类型，例如Map<K, V>。
8.泛型的局限：
  1).<T>不能是基本类型，例如int，因为实际类型是Object，Object类型无法持有基本类型：
	Pair<int> p = new Pair<>(1, 2); // compile error!
  2).无法取得带泛型的Class。换句话说，所有泛型实例，无论T的类型是什么，getClass()返回同一个Class实例，因为编译后它们全部都是Pair<Object>。
  3).无法判断带泛型的类型：
  4).不能实例化T类型：
9.不能获取带泛型类型的Class，例如：Pair<String>.class；
10.不能判断带泛型类型的类型，例如：x instanceof Pair<String>；
11.不能实例化T类型，例如：new T()。
12.泛型方法要防止重复定义方法，例如：public boolean equals(T obj)；
13.泛型继承,在继承了泛型类型的情况下，子类可以获取父类的泛型类型。

使用extends限定参数
1.使用类似<? extends Number>通配符作为方法参数时表示：
	方法内部可以调用获取Number引用的方法，例如：Number n = obj.getFirst();；
	方法内部无法调用传入Number引用的方法（null除外），例如：obj.setFirst(Number n);。
一句话总结：使用extends通配符表示可以读，不能写。

如方法参数类型List<? extends Integer>表明了该方法内部只会读取List的元素，不会修改List的元素（因为无法调用add(? extends Integer)、remove(? extends Integer)这些方法。换句话说，这是一个对参数List<? extends Integer>进行只读的方法（恶意调用set(null)除外）。
2.使用类似<T extends Number>定义泛型类时表示：
泛型类型限定为Number以及Number的子类。

使用super通配符
1.使用<? super Integer>通配符表示：
	允许调用set(? super Integer)方法传入Integer的引用；
	不允许调用get()方法获得Integer的引用。
	唯一例外是可以获取Object的引用：Object o = p.getFirst()。
 换句话说，使用<? super Integer>通配符作为方法参数，表示方法内部代码对于参数只能写，不能读。

对比extends和super通配符
1.<? extends T>允许调用读方法T get()获取T的引用，但不允许调用写方法set(T)传入T的引用（传入null除外）；
2.<? super T>允许调用写方法set(T)传入T的引用，但不允许调用读方法T get()获取T的引用（获取Object除外）。
一个是允许读不允许写，另一个是允许写不允许读。

PECS原则，无限定通配符
1.Producer Extends Consumer Super。即，如果需要返回T，它是生产者（Producer），要使用extends通配符；如果需要写入T，它是消费者（Consumer），要使用super通配符。
2.无限定通配符，即只定义一个?
	1).不允许调用set(T)方法并传入引用（null除外）；
	2).不允许调用T get()方法并获取T引用（只能获取Object引用）。
	换句话说，既不能读，也不能写，那只能做一些null判断：
    3).<?>通配符有一个独特的特点，就是：Pair<?>是所有Pair<T>的超类：
	4).无限定通配符<?>很少使用，可以用<T>替换，同时它是所有<T>类型的超类。

集合
1.Java的java.util包主要提供了以下三种类型的集合：
	List：一种有序列表的集合，例如，按索引排列的Student的List；
	Set：一种保证没有重复元素的集合，例如，所有无重复名称的Student的Set；
	Map：一种通过键值（key-value）查找的映射表集合，例如，根据Student的name查找对应Student的Map。
2.Java访问集合总是通过统一的方式——迭代器（Iterator）;
3.ArrayList，LinkedList(内部每个元素都指向下一个元素)
	1).ArrayList和LinkedList：
						ArrayList	LinkedList
	获取指定元素		速度很快	需要从头开始查找元素
	添加元素到末尾		速度很快	速度很快
	指定位置添加/删除	需移动元素	无需移动元素
	内存占用			少			较大
	
	2).List<E>接口，可以看到几个主要的接口方法：
	在末尾添加一个元素：boolean add(E e)
	在指定索引添加一个元素：boolean add(int index, E e)
	删除指定索引的元素：int remove(int index)
	删除某个元素：int remove(Object e)
	获取指定索引的元素：E get(int index)
	获取链表大小（包含元素的个数）：int size()
	
    3).通常情况下，优先使用ArrayList

4.List的特点
  1).List接口允许添加重复的元素，即List内部的元素可以重复：
  2).List还允许添加null：
  3).可以通过List接口提供的of()方法，根据给定元素快速创建List：
	List<Integer> list = List.of(1, 2, 5);
  4).但List.of()方法不接受null值，如果传入null，会抛出NullPointerException异常。
  5).遍历List:for,for-iterator,for each(推荐)
		List<String> list = List.of("apple", "pear", "banana");
        for (String s : list) {
            System.out.println(s);
        }

5.List和Array转换
 1).List ==> Array 有三种方法
    第一种是调用toArray()方法直接返回一个Object[]数组，这种方法会丢失类型信息，所以实际应用很少。：
		List<String> list = List.of("apple", "pear", "banana");
		Object[] array = list.toArray();
		for (Object s : array) {
			System.out.println(s);
		}
	第二种方式是给toArray(T[])传入一个类型相同的Array，List内部自动把元素复制到传入的Array中：  
		List<Integer> list = List.of(12, 34, 56);
        Integer[] array = list.toArray(new Integer[3]);
        for (Integer n : array) {
            System.out.println(n);
        }

        List<String> ll = List.of("apple","pear","watermelon","banana");
        String[] ss = ll.toArray(new String[ll.size()]);
        System.out.println(Arrays.toString(ss));
	最后一种更简洁的写法是通过List接口定义的T[] toArray(IntFunction<T[]> generator)方法：
		List<String> ll = List.of("apple","pear","watermelon","banana");
		String[] ss = ll.toArray(String[]::new);
 2).Array ==> List , 通过List.of(T...)方法最简单：
	Integer[] array = { 1, 2, 3 };
	List<Integer> list = List.of(array);
	注，对于JDK 11之前的版本，可以使用Arrays.asList(T...)方法把数组转换成List。	

6.对只读List调用add()、remove()方法会抛出UnsupportedOperationException。
7.List还提供了boolean contains(Object o)方法来判断List是否包含某个指定元素，int indexOf(Object o)方法可以返回某个元素的索引，如果元素不存在，就返回-1。。
    List<String> list = List.of("A", "B", "C");
	System.out.println(list.contains("C")); // true
	System.out.println(list.contains("X")); // false
	System.out.println(list.indexOf("C")); // 2
	System.out.println(list.indexOf("X")); // -1
 注意：
  1).contains，indexOf 在List内部并不是通过==判断两个元素是否相等，而是使用equals()方法判断两个元素是否相等。
  2).对于引用字段比较，我们使用 equals()，对于基本类型字段的比较，我们使用==.

总结一下equals()方法的正确编写方法：
	1).先确定实例“相等”的逻辑，即哪些字段相等，就认为实例相等；
	2).用instanceof判断传入的待比较的Object是不是当前类型，如果是，继续比较，否则，返回false；
	3).对引用类型用Objects.equals()比较，对基本类型直接用==比较。
	4).使用Objects.equals()比较两个引用类型是否相等的目的是省去了判断null的麻烦。两个引用类型都是null时它们也是相等的。
	5).如果不调用List的contains()、indexOf()这些方法，那么放入的元素就不需要实现equals()方法。

Map映射表
1.Map是一种映射表，可以通过key快速查找value。
2.map.input(name,value)方法，如果放入的key已经存在，put()方法会返回被删除的旧的value，否则，返回null。
3.可以通过for each遍历keySet()，也可以通过for each遍历entrySet()，直接获取key-value。
	// keySet()
	Map<String, Integer> map = new HashMap<>();
	map.put("apple", 123);
	map.put("pear", 456);
	map.put("banana", 789);
	for (String key : map.keySet()) {
		Integer value = map.get(key);
		System.out.println(key + " = " + value);
	}

	// Map.Entry
	Map<String, Integer> map = new HashMap<>();
	map.put("apple", 123);
	map.put("pear", 456);
	map.put("banana", 789);
	for (Map.Entry<String, Integer> entry : map.entrySet()) {
		String key = entry.getKey();
		Integer value = entry.getValue();
		System.out.println(key + " = " + value);
	}

4.Map和List不同的是，Map存储的是key-value的映射关系，并且，它不保证顺序。
5.最常用的一种Map实现是HashMap，当缓存用。

















































