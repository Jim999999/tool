
artisan 命令

php artisan list ：

app：只包含 app:name 命令，用于替换应用默认命名空间 App\
auth：只包含 auth:clear-resets，用于从数据库清除已过期的密码 Token
cache：应用缓存相关命令
config：config:cache 用于缓存应用配置，config:clear 用于清除缓存配置
db：db:seed 用于通过填充器填充数据库（如果编写了填充器的话）
event：event:generate 用于根据注册信息生成未创建的事件类及监听器类
key：key:generate 用于手动设置应用的 APP_KEY
make：用于根据模板快速生成应用各种脚手架代码，如认证、模型、控制器、数据库迁移文件等等等，我们会将每个命令穿插在相应教程中介绍
migrate：数据库迁移相关命令（数据库教程中会详细介绍）
notifications：notifications:table 用于生成通知表
optimize：optimize:clear 用于清除缓存的启动文件
package：package:discover 用于重新构建缓存的扩展包 manifest
queue：队列相关命令（队列教程中会详细介绍）
route：路由相关命令，route:cache 和 route:clear 分别用于缓存路由信息和清除路由缓存，route:list 用于列出应用所有路由信息
schedule：调度任务相关命令（调度任务教程中会介绍）
session：对于数据库驱动的 Session，我们通过 session:table 生成 sessions 数据表
storage：storage:link 生成一个软链 public/storage 指向 storage/app/public
vendor：vendor:publish 用于发布扩展包中的公共资源
view：view:cache 用于编译应用所有 Blade 模板，view:clear 用于清除这些编译文件

#查看应用的所有路由
php artisan route:list 

#查看artisan make:model 序列命令
php artisan make:model -h

#Generate a migration, factory, Model, controller for the model
php artisan make:model UserProfile -a

#Create a new controller for the model
php artisan make:model UserProfile -c

#Create a new migration file for the model
php artisan make:model UserProfile -m

#Create a new factory for the model
php artisan make:model UserProfile -f

php artisan
			make:auth                   
			make:channel                
			make:command                
			make:controller             
			make:event                  
			make:exception              
			make:factory                
			make:job                    
			make:listener               
			make:mail                   
			make:middleware             
			make:migration              
			make:model                  
			make:notification           
			make:observer               
			make:policy                 
			make:provider               
			make:request                
			make:resource               
			make:rule                   
			make:seeder                 
			make:test      

			clear-compiled：移除编译过的类文件，比如缓存、Blade视图文件等
			down：将应用切换到维护模式以便查找问题
			up：将应用从维护模式恢复为正常模式
			env：显示应用当前运行环境，如 local、production
			migrate：运行所有数据库迁移
			optimize：优化应用以便提供更好的性能
			serve：在本地 localhost:8000 端口启动 PHP 内置服务器
			tinker：进入 Tinker REPL
			dump-server：启动 dump server 收集 dump 信息
			preset：切换应用前端框架脚手架代码，比如从 Vue 切换到 React
			
			--version：打印当前 Laravel 版本
			
queue使用
https://blog.csdn.net/weixin_33755557/article/details/88922686
https://learnku.com/articles/3729/use-laravel-queue-to-understand-the-knowledge			
			
#migrate 相关命令
php artisan migrate --help

#生成|更新 create_users_table文件 ,由 --create | --table 决定
php artisan make:migration create_users_table --create=users  		# 创建数据表迁移
php artisan make:migration alter_users_add_nickname --table=users   # 更新数据表迁移

#迁移
php artisan migrate

#回滚迁移
php artisan migrate:rollback  #只回滚最后一个迁移文件的变更
php artisan migrate:rollback --step=5 #指定步数
php artisan migrate:reset	  #恢复到初始状态
php artisan migrate:refresh   #先回滚所有数据库迁移，然后运行migrate命令
php artisan migrate:refresh --seed   #先回滚所有数据库迁移，然后运行migrate命令，后再添加测试数据

#迁移
https://xueyuanjun.com/post/9580.html#toc_9

#数据填充
php artisan db:seed
php artisan db:seed --class=UsersTableSeeder


表结构构建:
php artisan make:migration create_users_table --create=users     #表迁移文件创建
php artisan migrate        #执行单个迁移 php artisan migrate --path=/app/databases/single/
表测试数据
php artisan make:seeder  UsersTableSeeder  			   #表测试数据文件创建，然后统一 DatabaseSeeder.php run方法中调用
php artisan make:factory UsersFactory --model=Users	   #创建测试工厂文件，然后在 UsersTableSeeder文件中 factory(\App\User::class, 5)->create();
迁移
php artisan migrate			 #迁移表结果 
php artisan migrate --seed   #在运行迁移命令的同时填充测试数据
填充数据(如果已迁移好表结构)
php artisan db:seed [--class=UsersTableSeeder]         #填充所有，[指定填充器类，默认是DatabaseSeeder]







